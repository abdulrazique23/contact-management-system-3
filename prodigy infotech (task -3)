import json
import re

# Contact class to store contact details
class Contact:
    def __init__(self, name, phone, email):
        self.name = name
        self.phone = phone
        self.email = email

    def to_dict(self):
        return {'name': self.name, 'phone': self.phone, 'email': self.email}

    @staticmethod
    def from_dict(contact_dict):
        return Contact(contact_dict['name'], contact_dict['phone'], contact_dict['email'])


# Contact Management System
class ContactManager:
    def __init__(self, file_name='contacts.json'):
        self.file_name = file_name
        self.contacts = []
        self.load_contacts()

    def add_contact(self, name, phone, email):
        if not self.validate_name(name):
            print("Invalid name. Name should only contain alphabets and spaces.")
            return
        if not self.validate_phone(phone):
            print("Invalid phone number. Phone number should contain only 10 digits.")
            return
        if not self.validate_email(email):
            print("Invalid email format.")
            return

        new_contact = Contact(name, phone, email)
        self.contacts.append(new_contact)
        self.save_contacts()
        print("Contact added successfully.")

    def view_contacts(self):
        if not self.contacts:
            print("No contacts available.")
            return
        for index, contact in enumerate(self.contacts):
            print(f"{index + 1}. Name: {contact.name}, Phone: {contact.phone}, Email: {contact.email}")

    def edit_contact(self, index, name=None, phone=None, email=None):
        if 0 <= index < len(self.contacts):
            if name and not self.validate_name(name):
                print("Invalid name. Name should only contain alphabets and spaces.")
                return
            if phone and not self.validate_phone(phone):
                print("Invalid phone number. Phone number should contain only 10 digits.")
                return
            if email and not self.validate_email(email):
                print("Invalid email format.")
                return

            if name:
                self.contacts[index].name = name
            if phone:
                self.contacts[index].phone = phone
            if email:
                self.contacts[index].email = email

            self.save_contacts()
            print("Contact updated successfully.")
        else:
            print("Invalid contact index")

    def delete_contact(self, index):
        if 0 <= index < len(self.contacts):
            del self.contacts[index]
            self.save_contacts()
            print("Contact deleted successfully.")
        else:
            print("Invalid contact index")

    def save_contacts(self):
        with open(self.file_name, 'w') as f:
            json.dump([contact.to_dict() for contact in self.contacts], f, indent=4)

    def load_contacts(self):
        try:
            with open(self.file_name, 'r') as f:
                contacts_list = json.load(f)
                self.contacts = [Contact.from_dict(contact) for contact in contacts_list]
        except FileNotFoundError:
            pass

    @staticmethod
    def validate_name(name):
        return bool(re.match("^[A-Za-z ]+$", name))

    @staticmethod
    def validate_phone(phone):
        return bool(re.match("^\d{10}$", phone))

    @staticmethod
    def validate_email(email):
        return bool(re.match(r"[^@]+@[^@]+\.[^@]+", email))


# Sample usage
if __name__ == '__main__':
    manager = ContactManager()

    while True:
        print("\nContact Management System")
        print("1. Add Contact")
        print("2. View Contacts")
        print("3. Edit Contact")
        print("4. Delete Contact")
        print("5. Exit")
        choice = input("Choose an option: ")

        if choice == '1':
            name = input("Enter Name: ").strip()
            phone = input("Enter Phone: ").strip()
            email = input("Enter Email: ").strip()
            manager.add_contact(name, phone, email)
        elif choice == '2':
            manager.view_contacts()
        elif choice == '3':
            manager.view_contacts()
            try:
                index = int(input("Enter contact index to edit: ").strip()) - 1
                name = input("Enter new Name (leave blank to skip): ").strip()
                phone = input("Enter new Phone (leave blank to skip): ").strip()
                email = input("Enter new Email (leave blank to skip): ").strip()
                manager.edit_contact(index, name or None, phone or None, email or None)
            except ValueError:
                print("Please enter a valid number.")
        elif choice == '4':
            manager.view_contacts()
            try:
                index = int(input("Enter contact index to delete: ").strip()) - 1
                manager.delete_contact(index)
            except ValueError:
                print("Please enter a valid number.")
        elif choice == '5':
            break
        else:
            print("Invalid option. Please try again.")
